from django.contrib.sessions.backends.db import Session
from django.conf import settings
from django.db import connection
from django.utils import simplejson
from django.http import HttpResponse

import appsettings
from gatestapp.gaclient.models import User

import memory, actions
import stopwatch, time

import logging
logger = logging.getLogger(__name__)

import pdb

from django.core.cache import cache

class DJPClientMiddleware(object):
    def __init__(self):
        
        self.tracking_script_template = """
        <script type="text/javascript">
          var _gaq = _gaq || [];
          _gaq.push(['_setAccount', '%s']);
          _gaq.push(['_trackPageview']);
        
          (function() {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
          })();
        
        _gaq.push(['_setCustomVar',
              1,                   // This custom var is set to slot #1.  Required parameter.
              'GA-REPORTING-ID',           // The top-level name for your online content categories.  Required parameter.
              '%i',  // Sets the value of 'GA-REPORTING-ID' to take the session-id parameter for this particular aricle.  Required parameter.
              1                    // (Optional) Sets the scope: 1:visitor-level; 2:session-level; 3:page-level;
           ]);
        </script>
        """
        
        "stats to render in the tracking script template"
        self.query_total = 0
        self.benchmark_clock_time = 0
        self.benchmark_cpu_time = 0
    
    def render_gajs_script(self):
        raise Exception('not implemented yet')
    
    def process_view(self, request, view, args, kwargs):
        logger.info('profile wrapper called')
        timer = stopwatch.Timer()
        
        cput1 = time.clock()
        
        response = view(request, *args, **kwargs)
        
        exectime = timer.stop()
        cput2 = time.clock()
        cputime = cput2 - cput1
        
        "*******************************************************************"
        "Create Reporting Id to be injected into ga.js in process_response,
        and save it as a session variable on a day by day basis"
        if not request.session['ga-report-id']:
            '''
            The session data now gets passed to transmit functions
            through the request object.
            '''
            new_user = User.objects.create()
            request.session['ga-report-id'] = new_user.analytics_id
            request.session.set_expiry(new_user.expiration_time)
            
                
        if appsettings.BUNDLE_DATA:
            actions.TransmitBundledData(request, kwargs,
                                        simplejson.dumps(connection.queries),
                                        exectime, cputime,
                                        memory.GetAggregateMemcacheStats(),
                                        sender=view)
        else:
            if getattr(settings, 'PROFILE_QUERIES', True):
                actions.TransmitQueries(request, kwargs,
                                        queries=connection.queries,
                                        sender=view)
            
            if getattr(settings, 'PROFILE_BENCHMARKS', True):
                actions.TransmitBenchmark(request, kwargs,
                                          exectime, cputime,
                                          sender=view)
            
            if getattr(settings, 'PROFILE_MEMCACHE_STATS', True):
                actions.TransmitMemcacheStats(request, kwargs,
                                              stats=memory.GetAggregateMemcacheStats(),
                                              sender=view)
            
            if getattr(settings, 'PROFILE_USER_ACTIVITY', True):
                actions.TransmitUserActivity(request, kwargs,
                                             sender=view)
        
        return response
    
    def process_response(self, request, response):
        """
        Alters the response with the tracking script; the {% djp_ga_js_script %} inserts the
        html-frinedly placeholder, which is replaced by this process response if available
        """
        # Should pull out previously set cookie (GA-ACCOUNTS-ID) to be injected into ga.js
        # This should then be injected into a google analytics custom variable
        
        # Therefore, need to see what kind of access one can have with google analytics custom vars
        # Also need to look into persistence of session-vars as a user navigates around a site
        # ....
        
        content = response.content
        index = content.find(appsettings.GA_JS_PLACEHOLDER)
        if index < 0:
            return response
        newcontent = content.replace(appsettings.GA_JS_PLACEHOLDER, 
                                     self.tracking_script_template %(appsettions.GA_PROFILE_ID, request.session['ga-report-id'] )
                                     )
        return HttpResponse(newcontent)

